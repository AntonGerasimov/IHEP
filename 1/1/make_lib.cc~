#include <stdio.h>
#include <stdlib.h>
#include <string.h> 

struct Particle{
	char *abbr;
	double mass;
	int id;
	int orrcode;
	int orcode[6];
	int parent; //ident for parent
};
void make_orcode(int orrcode, int orcode[6]){
	orcode[5]=orrcode%10;
	orrcode = orrcode/10;
	orcode[4]=orrcode%10;
	orrcode = orrcode/10;	
	orcode[3]=orrcode%10;
	orrcode = orrcode/10;
	orcode[2]=orrcode%10000;
	orrcode = orrcode/10000;
	orcode[1]=orrcode%10;
	orrcode =  orrcode/10;
	orcode[0]=orrcode;
}
void sort_abbr(Particle Particles[]){
        int i,j;
        Particle p;
        for (i=0; i<4400; i++){
                        for (j=1; j<i; j++){
                                if (strcmp(Particles[i].abbr, Particles[j].abbr)>0){
                                        p = Particles[i];
                                        Particles[i] = Particles[j];
                                        Particles[j] = p;
                                }
                        }
                }

}
void sort_orcode(Particle Particles[]){
        int i,j;
        Particle p;
        for (i=0; i<4400; i++){
                        for (j=1; j<i; j++){
                                if ((Particles[i].orrcode<Particles[j].orrcode)and(strcmp(Particles[i].abbr, "")!=0)and(strcmp(Particles[j].abbr, "")!=0)){
                                        p = Particles[i];
                                        Particles[i] = Particles[j];
                                        Particles[j] = p;
                                }
                        }
                }

}
double max_(double a, double b){
	if (a>b)
		return a;
	else
		return b;
}
int delta_m(Particle A, Particle B){
	int ret = -1;
	double delta = abs(A.orcode[2]-B.orcode[2]);
	double delta_ = abs(A.mass-B.mass);
//	printf("%lf\n",delta);
	if (((A.orcode[0]==10)and(delta<(A.orcode[2]-1000)/2))or((A.orcode[0]>10)and(A.orcode[0]<=14)and(delta<(9000 - A.orcode [2])/2))
	)
//or((A.orcode[0]<10)and(delta==0))or((A.orcode[0]>14)and(delta==0)))
		ret=1;
	if ((A.orcode[0]<10)or(A.orcode[0]>14)){
		if(delta_<max_(A.mass,B.mass)/2){
			ret=1;
		}
	}
	return ret;
}
int cmp_orcode(Particle A, Particle B){
	int ret = -1;
	if (A.orcode[0]==B.orcode[0]){
		if (A.orcode[1]==B.orcode[1]){
			if (A.orcode[3]==B.orcode[3]){
				if (delta_m(A,B)==1){
					ret = 1;
					
				}
			}
		}
	}
	return ret;
}
int my_strcmp(Particle A, Particle B){ //Проверяет, что название частицы А полностью входит в начало названия частицы B
	int ret = 1;
	for (int i=0; i<strlen(A.abbr);i++){
		if (A.abbr[i]!=B.abbr[i])
			ret = -1;
	}
	int k = (int)strlen(B.abbr);
//	printf("%s %d %c%c%c\n",B.abbr.c_str(), k, B.abbr[k-3], B.abbr[k-2], B.abbr[k-1]);
//	printf("%c %c %c\n", B.abbr[k-3], B.abbr[k-2], B.abbr[k-1]);
	if ((B.abbr[k-1]=='R')and(B.abbr[k-2]=='A')and(B.abbr[k-3]=='B'))
		ret = -1;
	return ret;

}
void make_parent(Particle A[], int i){
	if ((cmp_orcode(A[i], A[i+1]))and(A[i].abbr[0]==A[i].abbr[0])and(strcmp(A[i].abbr, "")!=0)){
		int j=i+1;
		while (my_strcmp(A[i], A[j])==1){
			A[j].parent = A[i].id;	
			j++;	
		}
		i=j;
	}
}
void print_(Particle A[]){
	printf("Printing...\n");
	for (int i=0; i<4200; i++){
		make_parent(A, i);
	}
	for (int i=0; i<4200; i++){
		if (A[i].parent!=-1){
			int j = A[i].parent;
		printf("Particle %s has a parent %s\n", A[i].abbr, A[j].abbr);
		}
//		if (cmp_orcode(A[i-1], A[i])==1)
//			printf("%d %d %d %d %d %d\n", A[i].orcode[0], A[i].orcode[1], A[i].orcode[2], A[i].orcode[3], A[i].orcode[4], A[i].orcode[5]);
//			printf("%s %s\n", A[i-1].abbr.c_str(), A[i].abbr.c_str());
	}
/*	for (int i=0; i<4200; i++){
		printf("%s %d %d\n", A[i].abbr.c_str(), A[i].id, i );
	}*/
}
int main(){
	int n = 4400;

	Particle Particles[4400];
	int k=0;

    	char *s = (char*)malloc(20*sizeof(char));
	s[0] = 'b'; 
	FILE *f = fopen("./vy.dum", "r"); 
//   	ifstream file("./vy.dum"); 
    	while(fgets(s,20,f)!=NULL){ 
        while(strcmp(s,"*E")!=0){
		char *first=(char*)malloc(40*sizeof(char));
		char *abbr=(char*)malloc(20*sizeof(char));
		char *ident=(char*)malloc(20*sizeof(char));
		char *orrcode=(char*)malloc(20*sizeof(char));
		char *m= (char*)malloc(20*sizeof(char));
		int parent = -1;
		int orcode[6]={-1,-1,-1,-1,-1,-1};
		int id = -1;
		char c = s[0];
		int i = 0;
		double mass = -1.;
		Particles[k].mass=mass;
		int q=0;
		while(c!=' '){
			first[q]=c;
			q++;
			i++;
			c = s[i];
		}    
		if (strcmp(first,"ABBREVIATION")==0){ 	
			i+=3;
			c = s[i];
			int q=0;
			while(c!=';'){
				abbr[q]=c;
				q++;
				i++;
				c=s[i];		
			}  
			Particles[k].abbr=abbr;
		}
/*
		if (strcmp(first,"IDENT")==0){
			i+=3;
			c = s[i];
			int q=0;
			while(c!=';'){
				ident[q]=c;
				q++;
				i++;
				c=s[i];
			}
			id = atoi(ident);
			Particles[k].id=id;
		}
		if (strcmp(first,"MASS")==0){
                        i+=3;
                        c = s[i];
			int q=0;
                        while(c!=';'){
                                m[q]=c;
				q++;
                                i++;
                                c=s[i];
                        }
                        mass = atof(m);
                        Particles[k].mass=mass;
		}
                if (strcmp(first,"ORCODE")==0){
                        i+=3;
                        c = s[i];
			int q=0;
                        while(c!=';'){
                                orrcode[q]=c;
				q++;
                                i++;
                                c=s[i];
                        }
                        int o = atoi(orrcode);
                        Particles[k].orrcode=o;
			make_orcode(o, Particles[k].orcode);
			Particles[k].parent=parent;
                        k++;
                }*/


		fgets(s,20,f);	
		}
    	}
	printf("%d\n", Particles[0].id);
	sort_orcode(Particles);
	for (int i=0; i<4200; i++){
		Particles[i].id=i;
	}
	print_(Particles);
	int kol = 0;
	for (int i=0; i<4400; i++){
		if (Particles[i].parent!=-1)
			kol++;
	}
	printf("%d\n", kol);
	fclose(f);
    	return 0;
}
